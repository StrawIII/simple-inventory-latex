
@online{encode_oss_uvicorn_nodate,
	title = {Uvicorn},
	url = {https://www.uvicorn.org/},
	author = {{Encode OSS}},
	urldate = {2024-06-02},
}

@online{asgi_team_introduction_nodate,
	title = {Introduction — {ASGI} 3.0 documentation},
	url = {https://asgi.readthedocs.io/en/latest/introduction.html},
	author = {{ASGI Team}},
	urldate = {2024-06-02},
}

@online{w3c_xml_protocol_working_group_soap_2007,
	title = {{SOAP} Version 1.2 Part 1: Messaging Framework (Second Edition)},
	url = {https://www.w3.org/TR/soap12/},
	author = {{W3C XML Protocol Working Group}},
	urldate = {2024-05-19},
	date = {2007-04-27},
}

@online{eby_pep_2010,
	title = {{PEP} 3333 – Python Web Server Gateway Interface v1.0.1 {\textbar} peps.python.org},
	url = {https://peps.python.org/pep-3333/},
	abstract = {Python Enhancement Proposals ({PEPs})},
	titleaddon = {Python Enhancement Proposals ({PEPs})},
	author = {Eby, Phillip J.},
	urldate = {2024-05-19},
	date = {2010-09-26},
	langid = {english},
}

@online{userland_software_xml-rpc_1999,
	title = {{XML}-{RPC} Specification},
	url = {https://xmlrpc.com/spec.md},
	author = {{UserLand Software}},
	urldate = {2024-06-02},
	date = {1999-01-21},
}

@online{json-rpc_working_group_json-rpc_2013,
	title = {{JSON}-{RPC} 2.0 Specification},
	url = {https://www.jsonrpc.org/specification},
	author = {{JSON-RPC Working Group}},
	urldate = {2024-06-02},
	date = {2013-01-04},
}

@online{postgresql_global_development_group_postgresql_2024,
	title = {{PostgreSQL}},
	url = {https://www.postgresql.org/},
	abstract = {The world's most advanced open source database.},
	titleaddon = {{PostgreSQL}},
	author = {{PostgreSQL Global Development Group}},
	urldate = {2024-05-19},
	date = {2024-05-19},
	langid = {english},
}

@online{the_postman_team_what_2023,
	title = {What Is a {REST} {API}? Examples, Uses \& Challenges},
	url = {https://blog.postman.com/rest-api-examples/},
	shorttitle = {What Is a {REST} {API}?},
	abstract = {{REST}, which stands for Representational State Transfer, is an architectural style for distributed hypermedia systems. Learn more about {REST} {APIs}.},
	titleaddon = {Postman Blog},
	author = {{The Postman Team}},
	urldate = {2024-05-19},
	date = {2023-06-28},
	langid = {american},
}

@online{the_owasp_foundation_cross_nodate,
	title = {Cross Site Request Forgery ({CSRF}) {\textbar} {OWASP} Foundation},
	url = {https://owasp.org/www-community/attacks/csrf},
	abstract = {Cross Site Request Forgery ({CSRF}) on the main website for The {OWASP} Foundation. {OWASP} is a nonprofit foundation that works to improve the security of software.},
	author = {{The OWASP® Foundation}},
	urldate = {2024-04-21},
	langid = {english},
}

@article{birrell_implementing_1984,
	title = {Implementing remote procedure calls},
	volume = {2},
	issn = {0734-2071, 1557-7333},
	url = {https://dl.acm.org/doi/10.1145/2080.357392},
	doi = {10.1145/2080.357392},
	pages = {39--59},
	number = {1},
	journaltitle = {{ACM} Transactions on Computer Systems},
	shortjournal = {{ACM} Trans. Comput. Syst.},
	author = {Birrell, Andrew D. and Nelson, Bruce Jay},
	urldate = {2024-06-02},
	date = {1984-02},
	langid = {english},
}

@thesis{nelson_remote_1981,
	title = {{REMOTE} {PROCEDURE} {CALL}},
	url = {https://www.proquest.com/openview/819adb1648461f783822bdfbaf0ab127/1?pq-origsite=gscholar&cbl=18750&diss=y},
	abstract = {Explore millions of resources from scholarly journals, books, newspapers, videos and more, on the {ProQuest} Platform.},
	pagetotal = {191},
	institution = {Carnegie-Mellon University},
	type = {Preview},
	author = {Nelson, Bruce Jay},
	urldate = {2024-06-02},
	date = {1981},
	langid = {english},
}

@online{johansson_trpc_nodate,
	title = {{tRPC} {\textbar} {tRPC}},
	url = {https://trpc.io/docs/},
	abstract = {End-to-end typesafe {APIs} made easy},
	author = {Johansson, Alexander},
	urldate = {2024-06-02},
	langid = {english},
}

@online{grpc_authors_introduction_nodate,
	title = {Introduction to {gRPC}},
	url = {https://grpc.io/docs/what-is-grpc/introduction/},
	abstract = {An introduction to {gRPC} and protocol buffers.},
	titleaddon = {{gRPC}},
	author = {{gRPC Authors}},
	urldate = {2024-06-02},
	langid = {english},
	note = {Section: docs},
}

@online{google_llc_overview_nodate,
	title = {Overview},
	url = {https://protobuf.dev/overview/},
	abstract = {Protocol Buffers are a language-neutral, platform-neutral extensible mechanism for serializing structured data.},
	author = {{Google LLC}},
	urldate = {2024-06-02},
	langid = {english},
}

@online{mozilla_foundation_spa_2023,
	title = {{SPA} (Single-page application) - {MDN} Web Docs Glossary: Definitions of Web-related terms {\textbar} {MDN}},
	url = {https://developer.mozilla.org/en-US/docs/Glossary/SPA},
	shorttitle = {{SPA} (Single-page application) - {MDN} Web Docs Glossary},
	abstract = {An {SPA} (Single-page application) is a web app implementation that loads only a single web document, and then updates the body content of that single document via {JavaScript} {APIs} such as Fetch when different content is to be shown.},
	author = {{Mozilla Foundation}},
	urldate = {2024-03-03},
	date = {2023-12-20},
	langid = {american},
}

@online{mozilla_foundation_rest_2023,
	title = {{REST} - {MDN} Web Docs Glossary: Definitions of Web-related terms {\textbar} {MDN}},
	url = {https://developer.mozilla.org/en-US/docs/Glossary/REST},
	shorttitle = {{REST} - {MDN} Web Docs Glossary},
	abstract = {{REST} (Representational State Transfer) refers to a group of software architecture design constraints that bring about efficient, reliable and scalable distributed systems.},
	author = {{Mozilla Foundation}},
	urldate = {2024-05-11},
	date = {2023-06-08},
	langid = {american},
}

@online{tailwind_labs_tailwind_2020,
	title = {Tailwind {CSS} - Rapidly build modern websites without ever leaving your {HTML}.},
	url = {https://tailwindcss.com/},
	abstract = {Tailwind {CSS} is a utility-first {CSS} framework for rapidly building modern websites without ever leaving your {HTML}.},
	author = {{Tailwind Labs}},
	urldate = {2024-05-19},
	date = {2020-11-15},
	langid = {english},
}

@online{red_hat_inc_what_nodate,
	title = {What is a {REST} {API}?},
	url = {https://www.redhat.com/en/topics/api/what-is-a-rest-api},
	abstract = {A {REST} {API} (also known as {RESTful} {API}) is an application programming interface that conforms to the constraints of {REST} architecture. {REST} stands for representational state transfer.},
	author = {{Red Hat, Inc.}},
	urldate = {2024-05-19},
	langid = {english},
}

@online{f5_nginx_nodate,
	title = {nginx},
	url = {https://nginx.org/en/},
	author = {{F5}},
	urldate = {2024-05-19},
}

@online{okta_json_nodate,
	title = {{JSON} Web Tokens - jwt.io},
	url = {https://jwt.io/},
	author = {{Okta}},
	urldate = {2024-05-19},
}

@online{the_owasp_foundation_cross_nodate-1,
	title = {Cross Site Scripting ({XSS}) {\textbar} {OWASP} Foundation},
	url = {https://owasp.org/www-community/attacks/xss/},
	abstract = {Cross Site Scripting ({XSS}) on the main website for The {OWASP} Foundation. {OWASP} is a nonprofit foundation that works to improve the security of software.},
	author = {{The OWASP® Foundation}},
	urldate = {2024-06-02},
	langid = {english},
}

@article{iskandar_comparison_2020,
	title = {Comparison between client-side and server-side rendering in the web development},
	volume = {801},
	issn = {1757-899X},
	url = {https://dx.doi.org/10.1088/1757-899X/801/1/012136},
	doi = {10.1088/1757-899X/801/1/012136},
	abstract = {Mandatory servers for universal applications that is accessible to number of users may be a deterrent for the corporation and excessive for small applications even though it could bring the compatibility advantages. Knowing that demand of web application increases to provide convenience and ease of use to the users, client side rendering comes to create software more fast and efficient. It has been done by redirecting the request towards an {HTML} file then the server will give messages without any content or a loading screen until the device takes all {JavaScript} to allow the browser compiling everything before displaying the content. Therefore, the purpose of this paper is to analyse the comparison between client side and server side method in the respect of technical aspects in term of first content paint, speed index, time to interactive, first meaningful paint, first idle {CPU} and estimated input latency that present better performance with 2.1s, 2.0s, 2.2s, 2.1s, 2.2s and 20ms respectively on server side. It also provide better result based on Google Audit with 100\% performance, 48\% accessibility, 93\% best practice and 89\% of search engine optimization ({SEO}).},
	pages = {012136},
	number = {1},
	journaltitle = {{IOP} Conference Series: Materials Science and Engineering},
	shortjournal = {{IOP} Conf. Ser.: Mater. Sci. Eng.},
	author = {Iskandar, Taufan Fadhilah and Lubis, Muharman and Kusumasari, Tien Fabrianti and Lubis, Arif Ridho},
	urldate = {2024-05-31},
	date = {2020-05},
	langid = {english},
}

@report{jones_json_2015,
	title = {{JSON} Web Token ({JWT})},
	url = {https://datatracker.ietf.org/doc/rfc7519},
	abstract = {{JSON} Web Token ({JWT}) is a compact, {URL}-safe means of representing claims to be transferred between two parties. The claims in a {JWT} are encoded as a {JSON} object that is used as the payload of a {JSON} Web Signature ({JWS}) structure or as the plaintext of a {JSON} Web Encryption ({JWE}) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code ({MAC}) and/or encrypted.},
	number = {{RFC} 7519},
	institution = {Internet Engineering Task Force},
	type = {Request for Comments},
	author = {Jones, Michael B. and Bradley, John and Sakimura, Nat},
	urldate = {2024-05-19},
	date = {2015-05},
}

@inproceedings{brito_migrating_2019,
	title = {Migrating to {GraphQL}: A Practical Assessment},
	url = {https://ieeexplore.ieee.org/abstract/document/8667986},
	doi = {10.1109/SANER.2019.8667986},
	shorttitle = {Migrating to {GraphQL}},
	abstract = {{GraphQL} is a novel query language proposed by Facebook to implement Web-based {APIs}. In this paper, we present a practical study on migrating {API} clients to this new technology. First, we conduct a grey literature review to gain an in-depth understanding on the benefits and key characteristics normally associated to {GraphQL} by practitioners. After that, we assess such benefits in practice, by migrating seven systems to use {GraphQL}, instead of standard {REST}-based {APIs}. As our key result, we show that {GraphQL} can reduce the size of the {JSON} documents returned by {REST} {APIs} in 94\% (in number of fields) and in 99\% (in number of bytes), both median results.},
	eventtitle = {2019 {IEEE} 26th International Conference on Software Analysis, Evolution and Reengineering ({SANER})},
	pages = {140--150},
	booktitle = {2019 {IEEE} 26th International Conference on Software Analysis, Evolution and Reengineering ({SANER})},
	author = {Brito, Gleison and Mombach, Thais and Valente, Marco Tulio},
	urldate = {2024-05-19},
	date = {2019-02},
	note = {{ISSN}: 1534-5351},
	keywords = {{APIs}, Bibliographies, Blogs, Computer hacking, Database languages, Databases, {GraphQL}, Migration Study, {REST}, Servers, Uniform resource locators},
}

@inproceedings{brito_rest_2020,
	title = {{REST} vs {GraphQL}: A Controlled Experiment},
	url = {https://ieeexplore.ieee.org/abstract/document/9101226},
	doi = {10.1109/ICSA47634.2020.00016},
	shorttitle = {{REST} vs {GraphQL}},
	abstract = {{GraphQL} is a novel query language for implementing service-based software architectures. The language is gaining momentum and it is now used by major software companies, such as Facebook and {GitHub}. However, we still lack empirical evidence on the real gains achieved by {GraphQL}, particularly in terms of the effort required to implement queries in this language. Therefore, in this paper we describe a controlled experiment with 22 students (10 undergraduate and 12 graduate), who were asked to implement eight queries for accessing a web service, using {GraphQL} and {REST}. Our results show that {GraphQL} requires less effort to implement remote service queries when compared to {REST} (9 vs 6 minutes, median times). These gains increase when {REST} queries include more complex endpoints, with several parameters. Interestingly, {GraphQL} outperforms {REST} even among more experienced participants (as is the case of graduate students) and among participants with previous experience in {REST}, but no previous experience in {GraphQL}.},
	eventtitle = {2020 {IEEE} International Conference on Software Architecture ({ICSA})},
	pages = {81--91},
	booktitle = {2020 {IEEE} International Conference on Software Architecture ({ICSA})},
	author = {Brito, Gleison and Valente, Marco Tulio},
	urldate = {2024-05-19},
	date = {2020-03},
	keywords = {Database languages, Facebook, {GraphQL}, {REST}, Servers, Standards, Task analysis, Uniform resource locators, Web {APIs}, Web services},
}

@inproceedings{shar_predicting_2012,
	location = {New York, {NY}, {USA}},
	title = {Predicting common web application vulnerabilities from input validation and sanitization code patterns},
	isbn = {9781450312042},
	url = {https://dl.acm.org/doi/10.1145/2351676.2351733},
	doi = {10.1145/2351676.2351733},
	series = {{ASE} '12},
	abstract = {Software defect prediction studies have shown that defect predictors built from static code attributes are useful and effective. On the other hand, to mitigate the threats posed by common web application vulnerabilities, many vulnerability detection approaches have been proposed. However, finding alternative solutions to address these risks remains an important research problem. As web applications generally adopt input validation and sanitization routines to prevent web security risks, in this paper, we propose a set of static code attributes that represent the characteristics of these routines for predicting the two most common web application vulnerabilities—{SQL} injection and cross site scripting. In our experiments, vulnerability predictors built from the proposed attributes detected more than 80\% of the vulnerabilities in the test subjects at low false alarm rates.},
	pages = {310--313},
	booktitle = {Proceedings of the 27th {IEEE}/{ACM} International Conference on Automated Software Engineering},
	publisher = {Association for Computing Machinery},
	author = {Shar, Lwin Khin and Tan, Hee Beng Kuan},
	urldate = {2024-05-06},
	date = {2012-09-03},
	keywords = {Defect prediction, empirical study, input validation and sanitization, static code attributes, web application vulnerabilities},
}

@inproceedings{nirmal_web_2018,
	title = {Web Application Vulnerabilities - The Hacker's Treasure},
	url = {https://ieeexplore.ieee.org/abstract/document/8597221},
	doi = {10.1109/ICIRCA.2018.8597221},
	abstract = {In today's online era, a web application is an integral part of every business. A web application may be a single page {HTML} website or a large web portal that offers various services on a web browser. There are many tools and methodologies that are relied upon to develop a web application. The development methodologies incorporate specialized frameworks, libraries in order to have the application more standardized and have it developed at a rapid pace to meet market demands. Web applications (web app) are hardened to mitigate security issues which are commonly referred as web application vulnerabilities. A web app security vulnerability is any kind of loop hole that allows an attacker to break into the web application to perform undesired actions on the target website. This may range from a cross site scripting ({XSS}) to vulnerabilities like Server Side Request Forger ({SSRF}) and its implications like {XML} External Entity ({XXE}). Though web applications are hardened to mitigate vulnerabilities, large scale web applications are still vulnerable post release in most cases. As a part of security research, critical vulnerabilities on large scale web applications were identified and the same were reported to the concerned security research team. The reporting was acknowledged and mitigated through appropriate channels. Common Vulnerabilities and Exposures ({CVEs}) were filed on Microsoft and {CISCO} products and the same were logged in National Vulnerability Database ({NVD}). Insights and tenets regarding web application and its vulnerabilities are highlighted in this manuscript.},
	eventtitle = {2018 International Conference on Inventive Research in Computing Applications ({ICIRCA})},
	pages = {58--62},
	booktitle = {2018 International Conference on Inventive Research in Computing Applications ({ICIRCA})},
	author = {Nirmal, K and Janet, B. and Kumar, R.},
	urldate = {2024-05-06},
	date = {2018-07},
	keywords = {Computer hacking, Online Security, Penetration testing, Pharming, Phishing, Portals, {SQL} injection, Software, Web application vulnerability},
}

@online{bhardwaj_adding_2023,
	title = {Adding {JWT} Authentication to React},
	url = {https://clerk.com/blog/adding-jwt-authentication-to-react},
	abstract = {Learn how to implement {JSON} Web Token ({JWT}) authentication in a React app using a standard flow, and how Clerk can make the process even easier.},
	author = {Bhardwaj, Anshuman},
	urldate = {2024-03-18},
	date = {2023-04-14},
	langid = {english},
}
